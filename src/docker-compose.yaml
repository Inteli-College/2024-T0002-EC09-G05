version: '3'

services:

  rabbitmq:
    container_name: rabbitmq
    build: ./rabbitMQ
    ports:
      - "15672:15672"
    command: ["rabbitmq-server"]
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 2s
      timeout: 2s
      retries: 20
    restart: always

  influxdb:
    image: influxdb:2.7.5-alpine
    container_name: influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: iot
      DOCKER_INFLUXDB_INIT_BUCKET: test
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: admin
    ports:
    - "8086:8086"
    healthcheck:
      test: "curl -f http://localhost:8086/ping"
      interval: 2s
      timeout: 2s
      retries: 20

  consumer:
    container_name: consumer
    build: ./consumer
    volumes:
      - ./consumer:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      influxdb:
        condition: service_healthy

  simulator:
    container_name: simulator
    build: ./simulator
    volumes:
      - ./simulator:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      influxdb:
        condition: service_healthy

  server:
    container_name: server
    build: ./server
    volumes:
      - ./server:/app
    ports:
    - 8080:8080
    depends_on:
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:16.2-alpine
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U username"]
      interval: 2s
      timeout: 2s
      retries: 20
    restart: always

  # client:
  #   container_name: client
  #   build: ./frontend
  #   ports:
  #     - 3000:3000

  adminer:
    image: adminer
    restart: always
    ports:
      - 8089:8080